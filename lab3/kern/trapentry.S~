/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.data;                                                          \
		.long name;	                                        \
	.text;                                                          \
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.data;                                                          \
		.long name;	                                        \
	.text;                                                          \
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

//lab3-start-challenge1
.data
	.global handlers_func
	
handlers_func:
//lab3-end-challenge1

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
 /*lab3-start
    TRAPHANDLER_NOEC(handler_divide, T_DIVIDE)  
    TRAPHANDLER_NOEC(handler_debug, T_DEBUG)
    TRAPHANDLER_NOEC(handler_nmi, T_NMI)
    TRAPHANDLER_NOEC(handler_brkpt, T_BRKPT)
    TRAPHANDLER_NOEC(handler_oflow, T_OFLOW)
    TRAPHANDLER_NOEC(handler_bound, T_BOUND)
    TRAPHANDLER_NOEC(handler_illop, T_ILLOP)
    TRAPHANDLER_NOEC(handler_device, T_DEVICE)
    TRAPHANDLER(handler_dblflt, T_DBLFLT)
    // T_COPROC 9 - RESERVED we can define it or no it doesnt effect 
    TRAPHANDLER(handler_tss, T_TSS)
    TRAPHANDLER(handler_segnp, T_SEGNP)
    TRAPHANDLER(handler_stack, T_STACK)
    TRAPHANDLER(handler_gpflt, T_GPFLT)
    TRAPHANDLER(handler_pgflt, T_PGFLT)
    // T_RES 15 - RESERVED we can define it or no it doesnt effect 
    TRAPHANDLER_NOEC(handler_fperr, T_FPERR)
    TRAPHANDLER(handler_align, T_ALIGN)
    TRAPHANDLER_NOEC(handler_mchk, T_MCHK)
    TRAPHANDLER_NOEC(handler_simderr, T_SIMDERR)
 lab3-end*/
 //lab3-start-challenge1
    TRAPHANDLER_NOEC(handlers_func0, T_DIVIDE)  
    TRAPHANDLER_NOEC(handlers_func1, T_DEBUG)
    TRAPHANDLER_NOEC(handlers_func2, T_NMI)
    TRAPHANDLER_NOEC(handlers_func3, T_BRKPT)
    TRAPHANDLER_NOEC(handlers_func4, T_OFLOW)
    TRAPHANDLER_NOEC(handlers_func5, T_BOUND)
    TRAPHANDLER_NOEC(handlers_func6, T_ILLOP)
    TRAPHANDLER_NOEC(handlers_func7, T_DEVICE)
    TRAPHANDLER(handlers_func8, T_DBLFLT)
    TRAPHANDLER_NOEC(handlers_func9, 9)               /* T_COPROC 9 - RESERVED we can define it or no it doesnt effect */
    TRAPHANDLER(handlers_func10, T_TSS)
    TRAPHANDLER(handlers_func11, T_SEGNP)
    TRAPHANDLER(handlers_func12, T_STACK)
    TRAPHANDLER(handlers_func13, T_GPFLT)
    TRAPHANDLER(handlers_func14, T_PGFLT)
    TRAPHANDLER_NOEC(handlers_func15, 15)            /* T_RES 15 - RESERVED we can define it or no it doesnt effect */
    TRAPHANDLER_NOEC(handlers_func16, T_FPERR)
    TRAPHANDLER(handlers_func17, T_ALIGN)
    TRAPHANDLER_NOEC(handlers_func18, T_MCHK)
    TRAPHANDLER_NOEC(handlers_func19, T_SIMDERR)
	//20-31 RESERVED
//lab3-end-challenge1


/*
 * Lab 3: Your code here for _alltraps
 */
 /*lab3-start*/
 _alltraps:
	pushl %ds
	pushl %es
	pushal
    	movw $GD_KD, %ax
    	movw %ax, %ds
    	movw %ax, %es
	pushl %esp
	call trap
 /*lab3-end*/




